# Interactive Math Game for Kids

This C++ program is an interactive math game designed to help kids practice basic arithmetic operations. The program randomly selects two numbers and an operation (addition, subtraction, multiplication, or division) and prompts the user to guess the result.

### How It Works

1. **Include Libraries**
   ```cpp
   #include <iostream>
   #include <ctime>
   using namespace std;
   ```
   - `#include <iostream>`: Allows the program to use input/output operations, such as `cin` and `cout`.
   - `#include <ctime>`: Provides functions to generate random numbers based on the current time.
   - `using namespace std;` allows using standard library functions without the `std::` prefix.

2. **Main Function**
   ```cpp
   int main() {
       srand(time(0));
       int num1 = 1 + rand() % 100000;
       int num2 = 1 + rand() % 100000;
   ```
   - **Purpose**: Initializes the program and generates random numbers for the math problem.
   - **Logic**:
     - `srand(time(0));` seeds the random number generator with the current time, ensuring unique random numbers each run.
     - `num1` and `num2` are assigned random values between 1 and 100,000 (using `rand() % 100000 + 1`).

3. **Variable Declarations**
   ```cpp
       int answer = 0;
       int guess;
       char key;
       int remainder = 0;
       int gremainder = 0;
       int operation = 1 + rand() % 4;
   ```
   - `answer` stores the correct answer for each operation.
   - `guess` stores the user’s input for their answer.
   - `key` is used to reveal the answer if the user wants to see it.
   - `remainder` and `gremainder` are used specifically for division (to check quotient and remainder).
   - `operation` randomly selects an arithmetic operation (1 = addition, 2 = subtraction, 3 = multiplication, 4 = division).

4. **Conditional Logic for Random Operation**
   ```cpp
   if(operation == 1) {
       // Addition Operation
   } else if(operation == 2) {
       // Subtraction Operation
   } else if(operation == 3) {
       // Multiplication Operation
   } else if(operation == 4) {
       // Division Operation
   }
   ```
   - Based on the value of `operation`, the program selects and executes the appropriate block of code for the chosen operation.

#### 1. **Addition Operation**
   ```cpp
   if(operation == 1) {
       cout << "Hey Kido! you need to perform addition of " << num1 << " and " << num2 << endl;
       answer = num1 + num2;
       cin >> guess;
       if(answer == guess) {
           cout << "Congratulations! Your answer is correct" << endl;
       } else {
           cout << "Oops! Your answer is incorrect" << endl;
           cout << "Press 's' to view the answer" << endl;
           cin >> key;
           if(key == 's') {
               cout << num1 << " + " << num2 << " = " << answer << endl;
           }
       }
   }
   ```
   - **Purpose**: Asks the user to add `num1` and `num2`.
   - **Logic**:
     - The program prompts the user to input their answer.
     - If the guess is correct, it prints a congratulatory message. If incorrect, it asks if the user wants to see the correct answer.

#### 2. **Subtraction Operation**
   ```cpp
   else if(operation == 2) {
       cout << "Hey Kido! you need to perform subtraction of " << num1 << " and " << num2 << endl;
       if(num1 > num2) {
           answer = num1 - num2;
       } else {
           answer = num2 - num1;
       }
       cin >> guess;
       if(answer == guess) {
           cout << "Congratulations! Your answer is correct" << endl;
       } else {
           cout << "Oops! Your answer is incorrect" << endl;
           cout << "Press 's' to view the solution" << endl;
           cin >> key;
           if(key == 's') {
               cout << num1 << " - " << num2 << " = " << answer << endl;
           }
       }
   }
   ```
   - **Purpose**: Asks the user to find the difference between `num1` and `num2`.
   - **Logic**:
     - The program ensures `answer` is always positive by subtracting the smaller number from the larger.
     - The program then checks the user’s guess and optionally shows the solution.

#### 3. **Multiplication Operation**
   ```cpp
   else if(operation == 3) {
       cout << "Hey Kido! you need to perform multiplication of " << num1 << " and " << num2 << endl;
       answer = num1 * num2;
       cin >> guess;
       if(answer == guess) {
           cout << "Congratulations! Your answer is correct" << endl;
       } else {
           cout << "Oops! Your answer is incorrect" << endl;
           cout << "Press 's' to view the solution" << endl;
           cin >> key;
           if(key == 's') {
               cout << num1 << " x " << num2 << " = " << answer << endl;
           }
       }
   }
   ```
   - **Purpose**: Asks the user to multiply `num1` and `num2`.
   - **Logic**: Similar to addition, it checks the user’s guess, then shows the correct answer if requested.

#### 4. **Division Operation**
   ```cpp
   else if(operation == 4) {
       cout << "Hey Kido! you need to perform division of " << num1 << " and " << num2 << endl;
       if(num1 > num2) {
           answer = num1 / num2;
           remainder = num1 % num2;
       } else {
           answer = num2 / num1;
           remainder = num2 % num1;
       }
       cout << "Please input the quotient" << endl;
       cin >> guess;
       cout << "Please input the remainder" << endl;
       cin >> gremainder;
       if(answer == guess && remainder == gremainder) {
           cout << "Congratulations! Your answer is correct" << endl;
       } else {
           cout << "Oops! Your answer is incorrect" << endl;
           cout << "Press 's' to view the solution" << endl;
           cin >> key;
           if(key == 's') {
               cout << "Quotient: " << answer << ", Remainder: " << remainder << endl;
           }
       }
   }
   ```
   - **Purpose**: Asks the user to find the quotient and remainder of `num1` divided by `num2`.
   - **Logic**:
     - The program ensures division of the larger number by the smaller to avoid floating-point answers.
     - It checks if both the quotient and remainder are correct and reveals the correct values if requested.

6. **End of Program**
   ```cpp
   return 0;
   ```
   - **Purpose**: Signals the program has finished successfully.

### Example

For example, if the program selects `num1 = 500` and `num2 = 200` with the operation of multiplication, the output might look like this:

```
Hey Kido! you need to perform multiplication of 500 and 200
If you have guessed the answer then please type it here
100000
Congratulations! Your answer is correct
```

If the user makes a wrong guess, the program will prompt them to press `'s'` to see the correct answer.

